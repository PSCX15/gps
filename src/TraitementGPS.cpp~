/*
 * TraitementGPS.cpp
 *
 *  Created on: 2 d√©c. 2016
 *      Author: amaury
 */


#include <string>
#include <vector>
#include "ros/ros.h"
#include "std_msgs/String.h"
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <sstream>
#include "sensor_msgs/NavSatFix.h"

#include "gps/GPS_refined.h"
#include "PointGPS.h"


std::vector<int> gpsAssignes;

std::vector<PointGPS*> listeGPS;
std::vector<PointGPS*> listePourMoyenne;
PointGPS* positionMoyenne;
int count = 0;
float currentTime = 0; 

int nombreGPS;

ros::Publisher gpsPourRL;


void chatterCallback(const gps::GPS_refined::ConstPtr& msg)
{
	int num = msg->numero;
	if(count<4){
		if(gpsAssignes[num]==-1){
			listeGPS[num] = new PointGPS(msg->latitude, msg->longitude,msg->altitude, msg->numero);
			//listeGPS[num] = gps;
			                
			gpsAssignes[num]=num;
			count++;
			ROS_INFO("GPS numero %i ajoute", num);
		}
	}
	
	ROS_INFO("%f",msg->time);
	if(currentTime +0.3 < msg->time){
		currentTime = msg->time;
		listePourMoyenne.clear();
	}
	
	listeGPS[num]->latitude = msg->latitude;
	listeGPS[num]->longitude = msg->longitude;
	listeGPS[num]->time = msg->time;
	listeGPS[num]->altitude = msg->altitude;
	listeGPS[num]->hop = msg->accuracy;

	
	listePourMoyenne.push_back(listeGPS[num]);	


	/*
	for (int i=0; i<4; i++){
		if(gpsAssignes[i]!=-1){
			if(gpsAssigneFresh[i]!=-1){
				listePourMoyenne.push_back(listeGPS[i]);
				gpsAssigneFresh[i]=-1;
			}
		}
	}
	*/

	if(listePourMoyenne.size()==nombreGPS){
		int nombreGPSUtilises = positionMoyenne->moyenneIntelligente(listePourMoyenne);

 positionMoyenne->latitude, positionMoyenne->longitude);
  	listePourMoyenne.clear();
  	
  	// POUR ROBOT_LOCALIZATION
  	sensor_msgs::NavSatFix gpsMsg;
  	gpsMsg.header.stamp = ros::Time::now();
  	gpsMsg.header.frame_id = "base_link";
  	gpsMsg.status.status = 1;
  	gpsMsg.status.service = 1;
  	gpsMsg.latitude = positionMoyenne->latitude;
  	gpsMsg.longitude = positionMoyenne->longitude;
  	gpsMsg.altitude = positionMoyenne->altitude;
  	gpsMsg.position_covariance[0] = 5.0;
  	gpsMsg.position_covariance[4] = 5.0;
  	gpsMsg.position_covariance[8] = 5.0;
  	gpsMsg.position_covariance_type = 2;
  	gpsPourRL.publish(gpsMsg);
  	
  	
	}
}



int main(int argc, char **argv)
{

  ros::init(argc, argv, "GPS_main");
  
  ros::NodeHandle n;
  
  ros::Rate loop_rate(10);
  
  gpsPourRL = n.advertise<sensor_msgs::NavSatFix>("gps/fix",1000);
  
  gpsAssignes.reserve(4);
  
  for (int i =0; i<4;i++){
  	gpsAssignes.push_back(-1);
  }
  
  positionMoyenne = new PointGPS();
  positionMoyenne->numero = -1;
  
  listeGPS.resize(4);
	
	ros::Subscriber sub = n.subscribe("GPSavance", 1000, chatterCallback);

  while(ros::ok()){

  nombreGPS = sub.getNumPublishers();
  ros::param::set("/numberOfGPS",nombreGPS);

  ros::spinOnce();

  loop_rate.sleep(); 
  }

  return 0;

}




